// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportManager.Models.Context;

namespace SportManager.Migrations
{
    [DbContext(typeof(SportDbContext))]
    [Migration("20201026152612_Monday")]
    partial class Monday
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportManager.Models.AccessRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProfileId");

                    b.ToTable("AccessRights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            MenuId = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            ParentMenuId = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("a1a2be93-a724-49db-b0a2-e9bac91a1bf6"),
                            MenuId = new Guid("33dcb26b-db77-4147-8398-d45a5d09e952"),
                            ParentMenuId = new Guid("33dcb26b-db77-4147-8398-d45a5d09e952"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("9768817f-52ef-4876-8665-408ed66ea7a7"),
                            MenuId = new Guid("d0e36979-1c0e-41a8-9a4a-c19293390f74"),
                            ParentMenuId = new Guid("d0e36979-1c0e-41a8-9a4a-c19293390f74"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("c94cfbeb-f24f-4373-a95e-e1538bb570f4"),
                            MenuId = new Guid("1f37b623-7973-43f0-baf5-bd15c995e89f"),
                            ParentMenuId = new Guid("1f37b623-7973-43f0-baf5-bd15c995e89f"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("76d95407-bd1c-4002-8257-bec8cd31b523"),
                            MenuId = new Guid("400dd70c-af53-4849-9889-823256adf99a"),
                            ParentMenuId = new Guid("400dd70c-af53-4849-9889-823256adf99a"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("b624870d-5137-454a-9ce7-a17447edc16d"),
                            MenuId = new Guid("832f9e6c-ee71-456c-9d70-c43cc756763b"),
                            ParentMenuId = new Guid("832f9e6c-ee71-456c-9d70-c43cc756763b"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("1c8b5f6a-5b26-4b24-b104-da026f87a210"),
                            MenuId = new Guid("449511ee-43c6-46a7-931d-53f9895dd3cd"),
                            ParentMenuId = new Guid("449511ee-43c6-46a7-931d-53f9895dd3cd"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        },
                        new
                        {
                            Id = new Guid("817b01d0-b04e-4bdf-85fd-509d57563ead"),
                            MenuId = new Guid("8a78e169-db54-49ff-999a-8bb1bcbe7956"),
                            ParentMenuId = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad")
                        });
                });

            modelBuilder.Entity("SportManager.Models.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("SportManager.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SportManager.Models.EventSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("EventSessions");
                });

            modelBuilder.Entity("SportManager.Models.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            Name = "Inter-University: Multiple disciplines"
                        },
                        new
                        {
                            Id = new Guid("bfdedc6a-01d1-44f7-9e70-595b8091342a"),
                            Name = "Intra-University: Multiple disciplines"
                        },
                        new
                        {
                            Id = new Guid("cb8f202b-549b-448d-a2e8-927ff944813e"),
                            Name = "Intra-University: Single discipline"
                        },
                        new
                        {
                            Id = new Guid("43abbe95-fc36-4122-b974-6dac96fd8b61"),
                            Name = "Inter-University: Single discipline"
                        });
                });

            modelBuilder.Entity("SportManager.Models.MakerChecker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<Guid?>("CheckerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MakerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SqlQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckerId");

                    b.HasIndex("MakerId");

                    b.ToTable("MakerCheckers");
                });

            modelBuilder.Entity("SportManager.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            Level = 1,
                            Link = "#Staff",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Manage Staff",
                            ParentId = new Guid("910ce653-c7f1-4429-9b95-19270767129d")
                        },
                        new
                        {
                            Id = new Guid("33dcb26b-db77-4147-8398-d45a5d09e952"),
                            Level = 2,
                            Link = "#Disciplines",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Manage Sport Disciplines",
                            ParentId = new Guid("33dcb26b-db77-4147-8398-d45a5d09e952")
                        },
                        new
                        {
                            Id = new Guid("d0e36979-1c0e-41a8-9a4a-c19293390f74"),
                            Level = 3,
                            Link = "#Events",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Manage Events",
                            ParentId = new Guid("d0e36979-1c0e-41a8-9a4a-c19293390f74")
                        },
                        new
                        {
                            Id = new Guid("1f37b623-7973-43f0-baf5-bd15c995e89f"),
                            Level = 4,
                            Link = "#Venues",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Manage Venues",
                            ParentId = new Guid("1f37b623-7973-43f0-baf5-bd15c995e89f")
                        },
                        new
                        {
                            Id = new Guid("400dd70c-af53-4849-9889-823256adf99a"),
                            Level = 5,
                            Link = "#Store",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Sports Store",
                            ParentId = new Guid("400dd70c-af53-4849-9889-823256adf99a")
                        },
                        new
                        {
                            Id = new Guid("832f9e6c-ee71-456c-9d70-c43cc756763b"),
                            Level = 6,
                            Link = "#Profiles",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Manage User Profiles",
                            ParentId = new Guid("832f9e6c-ee71-456c-9d70-c43cc756763b")
                        },
                        new
                        {
                            Id = new Guid("449511ee-43c6-46a7-931d-53f9895dd3cd"),
                            Level = 7,
                            Link = "#Maintenance",
                            MenuType = "MAINMENU",
                            MenuUser = "STAFF",
                            Name = "Maintenance",
                            ParentId = new Guid("449511ee-43c6-46a7-931d-53f9895dd3cd")
                        },
                        new
                        {
                            Id = new Guid("8a78e169-db54-49ff-999a-8bb1bcbe7956"),
                            Level = 1,
                            Link = "/Staff/",
                            MenuType = "SUB-MENU",
                            MenuUser = "STAFF",
                            Name = "View Staff",
                            ParentId = new Guid("910ce653-c7f1-4429-9b95-19270767129d")
                        });
                });

            modelBuilder.Entity("SportManager.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecepientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecepientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SportManager.Models.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPassword")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parameters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            IsPassword = false,
                            Name = "EMAILADDRESS",
                            Value = "appsderick@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bfdedc6a-01d1-44f7-9e70-595b8091342a"),
                            IsPassword = true,
                            Name = "EMAILPASSWORD",
                            Value = "fjMlAlKNVkNQTNIm5790Ww=="
                        },
                        new
                        {
                            Id = new Guid("cb8f202b-549b-448d-a2e8-927ff944813e"),
                            IsPassword = false,
                            Name = "EMAILFROM",
                            Value = "SPORTS DEPARTMENT"
                        },
                        new
                        {
                            Id = new Guid("76a94ef2-6b7f-4800-bbf9-12030898f3c9"),
                            IsPassword = false,
                            Name = "OTP_EXPIRY_IN_MINUTES",
                            Value = "60"
                        });
                });

            modelBuilder.Entity("SportManager.Models.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("SportManager.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            Name = "Coordinator"
                        },
                        new
                        {
                            Id = new Guid("bfdedc6a-01d1-44f7-9e70-595b8091342a"),
                            Name = "Patron"
                        },
                        new
                        {
                            Id = new Guid("cb8f202b-549b-448d-a2e8-927ff944813e"),
                            Name = "StoreKeeper"
                        },
                        new
                        {
                            Id = new Guid("43abbe95-fc36-4122-b974-6dac96fd8b61"),
                            Name = "Secretary"
                        },
                        new
                        {
                            Id = new Guid("3dd74e55-64b8-4245-8cfe-b79ec6057a3d"),
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("SportManager.Models.SportDiscipine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SportDiscipines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            DateAdded = new DateTime(2020, 10, 26, 18, 26, 11, 898, DateTimeKind.Local).AddTicks(7592),
                            Deleted = false,
                            Name = "Football",
                            Status = true
                        });
                });

            modelBuilder.Entity("SportManager.Models.SportDisciplinesInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportDiscipineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SportDiscipineId");

                    b.ToTable("SportDisciplinesInEvents");
                });

            modelBuilder.Entity("SportManager.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Authorized")
                        .HasColumnType("bit");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OtpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegistrationVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            Authorized = true,
                            ChangePassword = false,
                            DateRegistered = new DateTime(2020, 10, 26, 18, 26, 11, 896, DateTimeKind.Local).AddTicks(6387),
                            Deleted = false,
                            Email = "oduorderick@gmail.com",
                            Firstname = "Derick",
                            Lastname = "Oduor",
                            OtpDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "GTbfZW0odYQ9g2uyGrB+Rw==",
                            Phone = "+254715812661",
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            RegistrationNumber = "ST001",
                            RegistrationVerified = false,
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("81019aa2-4056-41f9-b4b3-828d51fa7c51"),
                            Authorized = true,
                            ChangePassword = false,
                            DateRegistered = new DateTime(2020, 10, 26, 18, 26, 11, 898, DateTimeKind.Local).AddTicks(5113),
                            Deleted = false,
                            Email = "appsderick@gmail.com",
                            Firstname = "Derick",
                            Lastname = "Oduor",
                            OtpDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "GTbfZW0odYQ9g2uyGrB+Rw==",
                            Phone = "+254712345678",
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            RegistrationNumber = "ST001",
                            RegistrationVerified = false,
                            Status = false
                        });
                });

            modelBuilder.Entity("SportManager.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            Name = "SportStore"
                        });
                });

            modelBuilder.Entity("SportManager.Models.StoreCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreCategories");
                });

            modelBuilder.Entity("SportManager.Models.StoreItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreCategoryId");

                    b.ToTable("StoreItems");
                });

            modelBuilder.Entity("SportManager.Models.StoreItemInUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Rejected")
                        .HasColumnType("bit");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit");

                    b.Property<Guid>("SportDiscipineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SportDiscipineId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("StoreItemInUse");
                });

            modelBuilder.Entity("SportManager.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Authorized")
                        .HasColumnType("bit");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OtpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegistrationVerified")
                        .HasColumnType("bit");

                    b.Property<Guid>("SportDiscipineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SportDiscipineId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            Authorized = true,
                            ChangePassword = false,
                            DateRegistered = new DateTime(2020, 10, 26, 18, 26, 11, 899, DateTimeKind.Local).AddTicks(8084),
                            Email = "derick_oduor@yahoo.com",
                            Firstname = "Derick",
                            Lastname = "Oduor",
                            OtpDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "GTbfZW0odYQ9g2uyGrB+Rw==",
                            Phone = "+254756993396",
                            ProfileId = new Guid("327d571a-1690-44e0-806d-65e0593364ad"),
                            RegistrationNumber = "S13/21416/14",
                            RegistrationVerified = false,
                            SportDiscipineId = new Guid("910ce653-c7f1-4429-9b95-19270767129d"),
                            Status = false
                        });
                });

            modelBuilder.Entity("SportManager.Models.StudentsParticipatingInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportDisciplinesInEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SportDisciplinesInEventId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsParticipatingInEvents");
                });

            modelBuilder.Entity("SportManager.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SportDiscipineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SportDiscipineId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SportManager.Models.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("SportManager.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("SportManager.Models.AccessRight", b =>
                {
                    b.HasOne("SportManager.Models.Menu", "Menu")
                        .WithMany("AccessRights")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.Profile", "Profile")
                        .WithMany("AccessRights")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.Event", b =>
                {
                    b.HasOne("SportManager.Models.EventType", "EventType")
                        .WithMany("Event")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.EventSession", b =>
                {
                    b.HasOne("SportManager.Models.Event", "Event")
                        .WithMany("EventSessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.Venue", "Venue")
                        .WithMany("EventSessions")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.MakerChecker", b =>
                {
                    b.HasOne("SportManager.Models.Staff", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId");

                    b.HasOne("SportManager.Models.Staff", "Maker")
                        .WithMany("MakerCheckers")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.SportDisciplinesInEvent", b =>
                {
                    b.HasOne("SportManager.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.SportDiscipine", "SportDiscipine")
                        .WithMany()
                        .HasForeignKey("SportDiscipineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.Staff", b =>
                {
                    b.HasOne("SportManager.Models.Profile", "Profile")
                        .WithMany("Staffs")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.StoreCategory", b =>
                {
                    b.HasOne("SportManager.Models.Store", null)
                        .WithMany("StoreCategories")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("SportManager.Models.StoreItem", b =>
                {
                    b.HasOne("SportManager.Models.StoreCategory", "StoreCategory")
                        .WithMany("StoreItems")
                        .HasForeignKey("StoreCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.StoreItemInUse", b =>
                {
                    b.HasOne("SportManager.Models.Event", "Event")
                        .WithMany("StoreItemsInUse")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.SportDiscipine", "SportDiscipine")
                        .WithMany("StoreItemsInUse")
                        .HasForeignKey("SportDiscipineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.StoreItem", "StoreItem")
                        .WithMany("StoreItemsInUse")
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.Student", b =>
                {
                    b.HasOne("SportManager.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.SportDiscipine", "SportDiscipine")
                        .WithMany("Students")
                        .HasForeignKey("SportDiscipineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.StudentsParticipatingInEvent", b =>
                {
                    b.HasOne("SportManager.Models.SportDisciplinesInEvent", "SportDisciplinesInEvent")
                        .WithMany("StudentsParticipatingInEvent")
                        .HasForeignKey("SportDisciplinesInEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SportManager.Models.Student", "Student")
                        .WithMany("StudentsParticipatingInEvent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.Team", b =>
                {
                    b.HasOne("SportManager.Models.Event", "Event")
                        .WithMany("Teams")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportManager.Models.SportDiscipine", "SportDiscipine")
                        .WithMany("Teams")
                        .HasForeignKey("SportDiscipineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportManager.Models.TeamMember", b =>
                {
                    b.HasOne("SportManager.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
